;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration."
  (setq-default
   ;; List of additional paths where to look for configuration layers.

   ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '("~/spacemacs_conf/")
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers '(appearance
                                       ;;Test;;
                                       ;; ocodo-svg-modeline
                                       ;; vim-powerline
                                       (git :variables
                                            git-magit-status-fullscreen t
                                            git-enable-github-support t
                                            git-gutter-use-fringe t)
                                       prodigy
                                       (colors :variables
                                               colors-enable-nyan-cat-progress-bar ,(display-graphic-p)
                                               colors-enable-rainbow-identifiers nil)
                                       ;; (perspectives :variables
                                       ;;               perspective-enable-persp-projectile t)
                                       eyebrowse
                                       chrome
                                       erc
                                      (rcirc :variables
                                             rcirc-default-nick "cestdiego"
                                             rcirc-default-user-name "cestdiego"
                                             rcirc-default-full-name "Diego Berrocal"
                                             rcirc-enable-znc-support t)
                                       html
                                       restclient
                                       ;; Org
                                       org
                                       ;; org-notify
                                       org-cestdiego
                                       ;; Helm
                                       helm
                                       ;; Code Navigation
                                       ecb
                                       ;; multimedia
                                       presentations
                                       ;; Miscellaneous
                                       ;; webkit
                                       wakatime
                                       ;; Media
                                       bongo
                                       ;; Completings Stuff
                                       (auto-completion
                                        :variables
                                        auto-completion-enable-help-tooltip t
                                        auto-completion-return-key-behavior complete
                                        auto-completion-complete-with-key-sequence "jk")
                                       slime
                                       ycmd
                                       ;; Syntax Checking Stuff
                                       syntax-checking
                                       ;; LaTeX
                                       auctex
                                       ;; Shells
                                       eshell
                                       ;; Lang
                                       ansible
                                       markdown
                                       cp2k
                                       emacs-lisp
                                       html
                                       c-c++
                                       python
                                       ;; haskell
                                       javascript
                                       ruby
                                       ;; Utils
                                       search-engine
                                       calfw
                                       floobits
                                       utils
                                       xkcd
                                       vagrant
                                       )
   ;; List of additional packages that will be installed wihout being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dostspacemacs/config'.
   dotspacemacs-additional-packages '()
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '(evil-org)
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; Either `vim' or `emacs'. Evil is always enabled but if the variable
   ;; is `emacs' then the `holy-mode' is enabled at startup.
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer.
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to a .PNG file.
   ;; If the value is nil then no banner is displayed.
   ;; dotspacemacs-startup-banner 'official
   dotspacemacs-startup-banner 'official
   ;; t if you always want to see the changelog at startup
   dotspacemacs-always-show-changelog nil
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'."
   dotspacemacs-startup-lists '(recents projects)
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(
                         monokai
                         gotham
                         zenburn
                         solarized-dark
                         leuven
                         )
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Sauce Code Powerline"
                               :size 16
                               :weight normal
                               :width normal
                               :powerline-scale 1.0)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil the paste micro-state is enabled. While enabled pressing `p`
   ;; several times cycle between the kill ring content.
   dotspacemacs-enable-paste-micro-state t
   ;; Guide-key delay in seconds. The Guide-key is the popup buffer listing
   ;; the commands bound to the current keystrokes.
   dotspacemacs-guide-key-delay 0.4
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil ;; to boost the loading time.
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up.
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX."
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line.
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen.
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-smartparens-strict-mode t
   ;; Select a scope to highlight delimiters. Possible value is `all',
   ;; `current' or `nil'. Default is `all'
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now.
   dotspacemacs-default-package-repository nil)

  ;; User initialization goes here

  (set-face-background 'region "#0f0f0f")

  ;; (eval-after-load 'fringe-mode
  ;;   '(progn
  ;;      (fringe-mode -1)))
  ;; (set-fringe-mode '(0 . 0))
  ;; (set-face-attribute 'fringe nil :background "#1f1f1f")

  ;; (set-face-attribute 'mode-line nil
  ;;                     :inverse-video nil :box nil)
  ;; (set-face-attribute 'mode-line-inactive nil :box nil)
  ;; (set-face-attribute 'vertical-border nil :foreground "#1f1f1f")
  (setq-default evil-escape-key-sequence "nj")
  (setq delete-by-moving-to-trash t)
  (setq rcirc-server-alist
         '(("freenode"
            :host "freenode.berrocal.me"
            :port "1984"
            :auth "cestdiego/freenode"
            :channels ("#emacs"))

           ("geekshed"
            :host "geekshed.berrocal.me"
            :port "1984"
            :auth "cestdiego/geekshed"
            :channels ("#jupiterbroadcasting"))
           ))

  (setq ycmd-server-command "~/.installed/ycmd/")
  )

(defun dotspacemacs/config ()
  "Configuration function.
 This function is called at the very end of Spacemacs initialization after
layers configuration."
  (setq spacemacs-mode-line-minor-modesp nil)
  (setq spacemacs/mode-line-battery-time t)

  (global-vi-tilde-fringe-mode -1)
  (setq git-gutter-fr:side 'left-fringe)
  ;;; SANE DEFAULTS!!
  ;; decent navigation like a good citizen
  (global-set-key (kbd "<C-s-tab>") 'persp-next)
  (global-set-key (kbd "<M-s-tab>") 'persp-prev)

  ;; Use helm-projectile anywhere
  ;; (setq projectile-require-project-root nil)

  ;; UTF-8 please
  ;; (setq locale-coding-system 'utf-8) ; pretty
  ;; (set-terminal-coding-system 'utf-8) ; pretty
  ;; (set-keyboard-coding-system 'utf-8) ; pretty
  ;; (set-selection-coding-system 'utf-8) ; please
  ;; (prefer-coding-system 'utf-8) ; with sugar on top
  ;; (set-language-environment 'utf-8)
  ;; Sentences do not need double spaces to end. Period.
  ;; (set-default 'sentence-end-double-space nil)

  (eval-after-load 'org2blog
    (progn
      (setq org2blog/wp-blog-alist
            '(("astro-fc"
               :url "http://astronomia.uni.edu.pe/xmlrpc.php"
               :username "cestdiego"
               :default-title "Hello World"
               :default-categories ("org2blog" "emacs")
               :tags-as-categories nil)))
      (setq org2blog/wp-confirm-post t)
      ))

  ;; (setq web-mode-enable-current-column-highlight t)

  (defun custom-persp/bbspwm ()
    (interactive)
    (custom-persp "bbspwm"
                  (progn
                    (find-file "~/dotbspwm/.config/sxhkd/sxhkdrc")
                    (split-window-right-and-focus)
                    (find-file "~/dotbspwm/.config/bspwm/bspwmrc")
                    (split-window-below-and-focus)
                    (find-file "~/dotbspwm/.config/bspwm/autostart")
                    )
                  ))
  (evil-leader/set-key
    "Lob" 'custom-persp/bbspwm)
  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "google-chrome")
  (defadvice evil-inner-word (around underscore-as-word activate)
    (let ((table (copy-syntax-table (syntax-table))))
      (modify-syntax-entry ?_ "w" table)
      (with-syntax-table table
        ad-do-it)))

  ;; (setq python-shell-virtualenv-path "~/Enthought/Canopy_64bit/User/")
  ;; (setq python-shell-interpreter "~/Enthought/Canopy_64bit/User/bin/python")

  ;; (setenv "PYTHONPATH" "/home/io/build/horton-dev")
  ;; (setenv "HORTONDATA" "/home/io/build/horton-dev/data")

  ;; (setq python-shell-virtualenv-path "/usr/")
  (setq python-shell-interpreter "ipython")
  (setq python-shell-interpreter-args "-i --gui=wx")

  (setq eshell-rc-script "~/spacemacs_conf/.eshellrc")
  (setq eshell-path-env exec-path)

  (setq powerline-default-separator 'slant)
  (setq vc-follow-symlinks t)

  (evil-leader/set-key
    "m/" 'evil-search-highlight-persist-remove-all)

  (setq zone-timer (run-with-idle-timer 6000 t 'zone))
  (setq zone-programs [zone-pgm-rotate-LR-lockstep])

  (nyan-mode -1)
  (setq js2-strict-missing-semi-warning nil)

  (prodigy-define-service
    :name "HackSpace"
    :command "nodemon"
    :args '("dev" )
    :cwd "~/Projects/flat"
    :kill-signal 'sigkill
    :kill-process-buffer-on-stop t)

  (evil-define-key 'normal term-raw-map
    "p" 'term-paste)

  (add-to-list 'helm-completing-read-handlers-alist '(pony-manage . ido))

  (eval-after-load "shell"
    '(progn
       (evil-define-key 'insert term-raw-map (kbd "C-k") 'term-send-up)
       (evil-define-key 'insert term-raw-map (kbd "C-j") 'term-send-down)))

  (setq web-mode-engines-alist
        '(("django" . "\\.djhtml\\'")))

  (global-set-key (kbd "<C-tab>") 'eyebrowse-next-window-config)
  (global-set-key (kbd "<C-iso-lefttab>") 'eyebrowse-prev-window-config)

  (setq
   erc-nick "cestdiego"
   erc-user-full-name "Diego Berrocal"
   )
  ;; Insert thing at point for Helm-aG!!
  (setq helm-ag-insert-at-point 'symbol)

  (setq org-publish-project-alist
        '(("le_blog"
           :base-directory "~/Projects/angular_material_blog/src/assets/posts"
           :html-extension "html"
           :base-extension "org"
           :publishing-directory "~/Projects/angular_material_blog/src/assets/posts"
           :publishing-function (org-html-publish-to-html)
           :html-preamble nil
           :html-postamble nil
           )))

  ;; (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-auto-expanding nil)


  (add-to-list 'auto-mode-alist '("\\.tern-config\\'" . json-mode))
  (add-to-list 'auto-mode-alist '("\\.tern-project\\'" . json-mode))
  ;; (setq my-yas-dir (concat (car dotspacemacs-configuration-layer-path)
  ;;                          "snippets/"))
  ;; (setq yas-snippet-dirs
  ;;       (append (list my-yas-dir)
  ;;               (when (boundp 'yas-snippet-dirs)
  ;;                 yas-snippet-dirs)))
  ;; (setq org-hide-emphasis-markers t)
  ;; (regexp-opt (list " @@html:</kbd>@@[a-zA-Z0-9k ]"))
  ;; Got the org-link from
  ;; http://emacs.stackexchange.com/questions/7323/how-to-add-new-markup-to-org-mode-html-export
  ;; (org-add-link-type "kbd" #'ignore #'spacemacs/export-kbd-tag)
  ;; (defun spacemacs/export-kbd-tag (path desc format)
  ;;   "Export org audio links to hmtl."
  ;;   (cl-case format
  ;;     (html (format "<kbd>%s</kbd>" (or desc "")))
  ;;     (latex (format "(HOW DO I EXPORT AUDIO TO LATEX? \"%s\")" path))))
  ;; check out https://github.com/capitaomorte/yasnippet/issues/349
  (define-key yas-minor-mode-map (kbd "C-M-/") 'yas-next-field-or-maybe-expand)
  (setq yas-triggers-in-field t)
  )

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ahs-case-fold-search nil)
 '(ahs-default-range (quote ahs-range-whole-buffer))
 '(ahs-idle-interval 0.25)
 '(ahs-idle-timer 0 t)
 '(ahs-inhibit-face-list nil)
 '(cua-global-mark-cursor-color "#2aa198")
 '(cua-normal-cursor-color "#839496")
 '(cua-overwrite-cursor-color "#b58900")
 '(cua-read-only-cursor-color "#859900")
 '(expand-region-contract-fast-key "V")
 '(expand-region-reset-fast-key "r")
 '(magit-use-overlays nil)
 '(org-agenda-files (quote ("~/dotfiles/README.org")))
 '(paradox-github-token t)
 '(ring-bell-function (quote ignore) t)
 '(safe-local-variable-values
   (quote
    ((nil . firestarter-mode)
     (firestarter start-process "le_process" "le_buffer" "rsync" "-avzP" "--filter=:- .gitignore" "miraflowers:/home/diego/miraflowers")
     (org-export-allow-bind-keywords . t)
     (set-input-method "latin-1-prefix" t)))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
